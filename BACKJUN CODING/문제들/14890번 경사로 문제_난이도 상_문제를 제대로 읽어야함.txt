//14890번 경사로
//www.acmicpc.net/problem/14890

#include <iostream>
#include <algorithm>
#include <math.h>
#include <deque>
#include <cstring>

#define MAX 105
#define BOUNDARY(a,b) (((a)>=0)&&((a)<(b)))
#define FOR0(a,b) for(int (a)=0;(a)<(b); (a)++)
#define FOR0_(a,b) for(int (a)=(b)-1;(a)>=0; (a)--)

using namespace std;

int N=0;
int L = 0;
int res = 0;
deque<pair<int, int>> d;

struct INFO
{
	int map[MAX][MAX];
	bool Ans_flag[MAX];
	bool bridge_flag[MAX][MAX];

	void rotate(){
		INFO cur;

		int cy = 0;
		FOR0(nx, N){
			int cx = 0;
			FOR0_(ny, N){
				cur.map[cy][cx] = map[ny][nx];
				cx++;
			}
			cy++;
		}
		memcpy(map, cur.map, sizeof(map));
	}

	void start_point(deque<pair<int, int>>* p){
		FOR0(x, N){
			p->push_back(make_pair(x, 0));
		}
	}

	void init(deque<pair<int, int>>* p){
		memset(Ans_flag, 0, sizeof(Ans_flag));
		memset(bridge_flag, 0, sizeof(bridge_flag));
		while (!p->empty())
		{
			p->pop_back();
		}
	}
};

void BFS(deque<pair<int, int>> *p, INFO *mp){
	
	while (!p->empty())
	{
		int nx = p->front().first;
		int ny = p->front().second;
		int cx = nx;
		int cy = ny;
		p->pop_front();

		while (1){
			//다음 좌표 값 갱신(다음 좌표, 이전좌표)
			ny += 1; nx = nx;
			cy = ny - 1; cx = nx;

			//현재 커런트가 엔드 조건에 도달 시
			if (cy == (N - 1)){
				if (!(mp->Ans_flag[cx])){
					res++;
					mp->Ans_flag[cx] = 1;
					break;
				}
			}

			//범위 벗어나면 break;
			if (!BOUNDARY(ny, N)) 
				break;			

			//탐색 시작
			//다음과 이전 값이 같을 경우
			if (mp->map[ny][nx] == mp->map[cy][cx]){
				//엔드 조건 탐색
				if (ny == (N - 1)){
					if (!(mp->Ans_flag[nx])){
						res++;
						mp->Ans_flag[nx] = 1;
						break;
					}
				}
			}

			//다음과 이전 값이 다를 경우
			else if (mp->map[ny][nx] != mp->map[cy][cx]){

				//값차이 1이상 걍 탈출
				if (abs(mp->map[ny][nx] - mp->map[cy][cx]) > 1){
					break;
				}
				//값차이가 1 이내 일경우
				else{
					//다음 값이 더 클경우 이전 좌표에 다리 설치 진행
					if (mp->map[ny][nx] > mp->map[cy][cx]){
						int flag = 1;
						//->L 길이 동안 다음 값이 다 같은지 확인, 다르면 break;
						for (int sy = cy - L + 1; sy < cy; sy++){
							if (!flag) 
								break;
							if (mp->map[sy][cx] != mp->map[sy + 1][cx])
								flag = 0;
						}
						//->L 길이에 다리 설치에 flag에 이전에 다리를 설치했는지 확인하고 없으면 다리 설치 및
						//  플래그 설정
						for (int sy = cy - L + 1; sy <= cy; sy++){
							if ((!flag)) 
								break;
							if (mp->bridge_flag[sy][cx]){
								flag = 0;
								break;
							}
						}

						if (flag){
							for (int sy = cy - L + 1; sy <= cy; sy++){
								mp->bridge_flag[sy][cx] = 1;
							}
							p->push_front(make_pair(nx, ny));
						}						
					}
					//이전 값이 더 클경우 다음 좌표에 다리 설치 진행
					else if (mp->map[ny][nx] < mp->map[cy][cx]){
						int flag = 1;
						//->L 길이 동안 값이 다 같은지 확인, 다르면 break;
						for (int sy = ny; sy < ny + L - 1; sy++){
							if (!flag) 
								break;
							if (mp->map[sy][cx] != mp->map[sy + 1][cx])
								flag = 0;
						}
						//->L 길이에 다리 설치에 flag에 이전에 다리를 설치했는지 확인하고 없으면 다리 설치 및
						//  플래그 설정
						for (int sy = ny; sy <= ny + L - 1; sy++){
							if ((!flag)) 
								break;
							if (mp->bridge_flag[sy][cx]){
								flag = 0;
								break;
							}
						}

						if (flag){
							for (int sy = ny; sy <= ny + L - 1; sy++){
								mp->bridge_flag[sy][cx] = 1;
							}
							p->push_front(make_pair(nx, ny + L - 1));
						}
					}
				}

				//값이 다르면 도중에 break내고 다시 push해서 읽어나가기 실행
				break;
			}
		}
	}

}

INFO BOARD;

int main(){

	ios::sync_with_stdio(false);
	cin.tie(0);

	cin >> N >> L;

	FOR0(y, N){
		FOR0(x, N){
			cin >> BOARD.map[y][x];
		}
	}

	BOARD.start_point(&d);
	BFS(&d, &BOARD);

	BOARD.init(&d);
	BOARD.rotate();
	BOARD.start_point(&d);
	BFS(&d, &BOARD);

	cout << res;

	return 0;
}